{"ast":null,"code":"import _regeneratorRuntime from\"/home/ajay/apps/covidtrack/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/ajay/apps/covidtrack/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/ajay/apps/covidtrack/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{Line,Bar}from'react-chartjs-2';import{fetchDailyData}from'../../api';import styles from'./Chart.module.css';var Chart=function Chart(_ref){var _ref$data=_ref.data,confirmed=_ref$data.confirmed,recovered=_ref$data.recovered,deaths=_ref$data.deaths,country=_ref.country;var _useState=useState({}),_useState2=_slicedToArray(_useState,2),dailyData=_useState2[0],setDailyData=_useState2[1];useEffect(function(){var fetchMyAPI=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var initialDailyData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetchDailyData();case 2:initialDailyData=_context.sent;setDailyData(initialDailyData);case 4:case\"end\":return _context.stop();}}},_callee);}));return function fetchMyAPI(){return _ref2.apply(this,arguments);};}();fetchMyAPI();},[]);var options={responsive:true,scales:{yAxes:[{type:'linear',ticks:{beginAtZero:true,max:undefined,precision:0},scaleLabel:{display:false,labelString:'Total Cases'}}],xAxes:[{type:'time',time:{unit:'day',tooltipFormat:'MMM DD',stepSize:7,displayFormats:{millisecond:'MMM DD',second:'MMM DD',minute:'MMM DD',hour:'MMM DD',day:'MMM DD',week:'MMM DD',month:'MMM DD',quarter:'MMM DD',year:'MMM DD'}},gridLines:{color:'rgba(0, 0, 0, 0)'}}]}};var barChart=confirmed?/*#__PURE__*/React.createElement(Bar,{data:{labels:['Infected','Recovered','Deaths'],datasets:[{label:'People',backgroundColor:['rgba(0, 0, 255, 0.5)','rgba(0, 255, 0, 0.5)','rgba(255, 0, 0, 0.5)'],data:[confirmed.value,recovered.value,deaths.value]}]},options:{legend:{display:false},title:{display:true,text:\"Current state in \".concat(country)}}}):null;var lineChart=dailyData[0]?/*#__PURE__*/React.createElement(Line,{data:{labels:dailyData.map(function(_ref3){var date=_ref3.date;return new Date(date).toDateString().split(' ').slice(1).join(' ');}),datasets:[{data:dailyData.map(function(data){return data.confirmed;}),label:'Infected',borderColor:'#3333ff',fill:true},{data:dailyData.map(function(data){return data.deaths;}),label:'Deaths',borderColor:'red',backgroundColor:'rgba(255, 0, 0, 0.5)',fill:true}]},options:options}):null;return/*#__PURE__*/React.createElement(\"div\",{className:styles.container},country?barChart:lineChart);};export default Chart;","map":{"version":3,"sources":["/home/ajay/apps/covidtrack/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","Line","Bar","fetchDailyData","styles","Chart","data","confirmed","recovered","deaths","country","dailyData","setDailyData","fetchMyAPI","initialDailyData","options","responsive","scales","yAxes","type","ticks","beginAtZero","max","undefined","precision","scaleLabel","display","labelString","xAxes","time","unit","tooltipFormat","stepSize","displayFormats","millisecond","second","minute","hour","day","week","month","quarter","year","gridLines","color","barChart","labels","datasets","label","backgroundColor","value","legend","title","text","lineChart","map","date","Date","toDateString","split","slice","join","borderColor","fill","container"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport { fetchDailyData } from '../../api';\n\nimport styles from './Chart.module.css';\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n    const [dailyData, setDailyData] = useState({});\n  \n    useEffect(() => {\n      const fetchMyAPI = async () => {\n        const initialDailyData = await fetchDailyData();\n  \n        setDailyData(initialDailyData);\n      };\n  \n      fetchMyAPI();\n    }, []);\n\n  const options = {\n    responsive: true, scales: {\n      yAxes: [\n        {\n          type: 'linear',\n          ticks: {\n            beginAtZero: true,\n            max: undefined,\n            precision: 0,\n          },\n          scaleLabel: {\n            display: false,\n            labelString: 'Total Cases',\n          },\n        },\n      ],\n      xAxes: [\n        {\n          type: 'time',\n          time: {\n            unit: 'day',\n            tooltipFormat: 'MMM DD',\n            stepSize: 7,\n            displayFormats: {\n              millisecond: 'MMM DD',\n              second: 'MMM DD',\n              minute: 'MMM DD',\n              hour: 'MMM DD',\n              day: 'MMM DD',\n              week: 'MMM DD',\n              month: 'MMM DD',\n              quarter: 'MMM DD',\n              year: 'MMM DD',\n            },\n          },\n          gridLines: {\n            color: 'rgba(0, 0, 0, 0)',\n          },\n        },\n      ],\n    },\n  };\n\n    const barChart = (\n        confirmed ? (\n          <Bar\n            data={{\n              labels: ['Infected', 'Recovered', 'Deaths'],\n              datasets: [\n                {\n                  label: 'People',\n                  backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n                  data: [confirmed.value, recovered.value, deaths.value],\n                },\n              ],\n            }}\n            options={{\n              legend: { display: false },\n              title: { display: true, text: `Current state in ${country}` },\n            }}\n          />\n        ) : null\n      );\n\n      const lineChart = (\n        dailyData[0] ? (\n          <Line\n            data={{\n              labels: dailyData.map(({ date }) => new Date(date).toDateString().split(' ').slice(1).join(' ')),\n              datasets: [{\n                data: dailyData.map((data) => data.confirmed),\n                label: 'Infected',\n                borderColor: '#3333ff',\n                fill: true,\n              }, {\n                data: dailyData.map((data) => data.deaths),\n                label: 'Deaths',\n                borderColor: 'red',\n                backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                fill: true,\n              },\n              ],\n            }} options={options}\n          />\n        ) : null\n      );\n\n      return (\n        <div className={styles.container}>\n          {country ? barChart : lineChart}\n        </div>\n      );\n    };\n\n\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}